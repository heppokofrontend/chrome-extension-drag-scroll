"use strict";const state={isUseOnlySpace:false,target:window,x:0,y:0,startX:0,startY:0,scrollableX:false,scrollableY:false,pressSpace:false,pressMouse:false};const run=()=>{const styleElement=(()=>{const element=document.createElement("style");element.textContent="* {cursor: move !important;}";element.dataset.from="chrome-extenstion";return element})();const dragScreen=(()=>{const element=document.createElement("drag-screen");element.style.cssText=`
      position: fixed !important;
      inset: 0 !important;
      z-index: 2147483647 !important;
    `;element.dataset.from="chrome-extenstion";return element})();const mousemoveHandler=e=>{const{startX,scrollableX,x,startY,scrollableY,y}=state;const left=startX+(scrollableX?x-e.screenX:0);const top=startY+(scrollableY?y-e.screenY:0);if(state.target instanceof Window||state.target instanceof Element){state.target?.scroll({top:top,left:left})}};const mouseupHandler=()=>{state.pressMouse=false;dragScreen.remove();window.removeEventListener("mousemove",mousemoveHandler)};const visibleOrHidden=/visible|hidden/;const diff=3;const isScrollableHorizon=({target,overflowX})=>{return target.clientWidth!==target.scrollWidth&&diff<Math.abs(target.clientWidth-target.scrollWidth)&&!visibleOrHidden.test(overflowX)};const isScrollableVertical=({target,overflowY})=>{return target.clientHeight!==target.scrollHeight&&diff<Math.abs(target.clientHeight-target.scrollHeight)&&!visibleOrHidden.test(overflowY)};const resolveTarget=eventTarget=>{if(eventTarget instanceof HTMLElement){let target=eventTarget;let scrollableX=false;let scrollableY=false;const checkedNodes=[];while(target){checkedNodes.push(target);if(1e4<checkedNodes.length){console.error("chrome-extension-hand-tool",checkedNodes);break}const{overflowX,overflowY}=getComputedStyle(target);if(target.firstChild){scrollableX=isScrollableHorizon({target:target,overflowX:overflowX});scrollableY=isScrollableVertical({target:target,overflowY:overflowY});if(scrollableX||scrollableY){return{target:target,scrollableX:scrollableX,scrollableY:scrollableY}}}if(!target.parentElement){break}target=target.parentElement}}return{target:window,scrollableX:true,scrollableY:true}};const mousedownHandler=e=>{if(!state.pressSpace){return}if(state.pressSpace){const{target,scrollableX,scrollableY}=resolveTarget(e.target);e.preventDefault();state.target=target;state.x=e.screenX;state.y=e.screenY;state.scrollableX=scrollableX;state.scrollableY=scrollableY;state.pressMouse=true;if(target===window){state.startX=window.pageXOffset;state.startY=window.pageYOffset}else if(target instanceof HTMLElement){state.startX=target.scrollLeft;state.startY=target.scrollTop}document.body.append(dragScreen);window.addEventListener("mousemove",mousemoveHandler,{passive:true})}};const targetIsEditableElement=target=>{const{activeElement}=document;if(activeElement===null||target!==activeElement){return false}const isEditableElement=activeElement instanceof HTMLElement&&!["inherit","false"].includes(activeElement.contentEditable);const isFormControls=["input","textarea","button"].includes(activeElement.tagName.toLowerCase());return isEditableElement||isFormControls};const keydownHandler=e=>{if(e.key!==" "||!state.isUseOnlySpace&&(!e.ctrlKey||!e.shiftKey)){return}if(state.pressSpace){e.preventDefault();return}if(targetIsEditableElement(e.target)){return}e.preventDefault();state.pressSpace=true;document.head.append(styleElement);document.body.append(dragScreen);window.addEventListener("mousedown",mousedownHandler)};const resetState=()=>{state.pressSpace=false;state.pressMouse=false;dragScreen.remove();styleElement.remove();window.removeEventListener("mousedown",mousedownHandler);window.removeEventListener("mousemove",mousemoveHandler)};const keyupHandler=e=>{if(e.key===" "){state.pressSpace=false;if(!state.pressMouse){resetState();return}}dragScreen.remove();styleElement.remove();window.removeEventListener("mousedown",mousedownHandler)};dragScreen.addEventListener("mouseup",e=>{e.stopPropagation();mouseupHandler()});window.addEventListener("mouseup",mouseupHandler);window.addEventListener("keydown",keydownHandler);window.addEventListener("keyup",keyupHandler);window.addEventListener("blur",resetState)};window.addEventListener("focus",()=>{chrome.storage.local.get(["isUseOnlySpace"],({isUseOnlySpace})=>{state.isUseOnlySpace=Boolean(isUseOnlySpace)})});chrome.runtime.onMessage.addListener(({isUseOnlySpace})=>{state.isUseOnlySpace=Boolean(isUseOnlySpace)});chrome.storage.local.get(["isUseOnlySpace"],({isUseOnlySpace})=>{state.isUseOnlySpace=Boolean(isUseOnlySpace);run()});