"use strict";const resolveIsActive=({isUseOnlySpace})=>{if(typeof isUseOnlySpace==="boolean"){return isUseOnlySpace}return true};const setIconPath=isUseOnlySpace=>{const path=isUseOnlySpace?"icon.png":"icon--disabled.png";chrome.storage.local.set({isUseOnlySpace:isUseOnlySpace});chrome.action.setIcon({path:path})};const toggleIconPath=()=>{return new Promise(resolve=>{chrome.storage.local.get(["isUseOnlySpace"],value=>{const isUseOnlySpace=!resolveIsActive(value);setIconPath(isUseOnlySpace);resolve(isUseOnlySpace)})})};chrome.storage.local.get(["isUseOnlySpace"],value=>{const isUseOnlySpace=resolveIsActive(value);setIconPath(isUseOnlySpace)});chrome.action.onClicked.addListener(()=>{new Promise(async()=>{const isUseOnlySpace=await toggleIconPath();const[tab]=await chrome.tabs.query({active:true,lastFocusedWindow:true});if(tab.url?.startsWith("http")&&typeof tab.id==="number"){chrome.tabs.sendMessage(tab.id,{isUseOnlySpace:isUseOnlySpace}).catch(console.log)}});return true});